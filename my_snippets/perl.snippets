priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet ife "Conditional if..else (ife)"
if ($1) {
	${2:# body...}
}
else {
	${3:# else...}
}

endsnippet

snippet ifee "Conditional if..elsif..else (ifee)"
if ($1) {
	${2:# body...}
}
elsif ($3) {
	${4:# elsif...}
}
else {
	${5:# else...}
}

endsnippet

snippet xunless "Conditional one-line (unless)"
${1:expression} unless ${2:condition};

endsnippet

snippet xif "Conditional one-line (xif)"
${1:expression} if ${2:condition};

endsnippet

snippet sub "Function (sub)"
sub ${1:function_name} {
	${2:# body...}
}

endsnippet

snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};

endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};

endsnippet

snippet test "Test"
#!/usr/bin/env perl -w

use strict;
use Test::More tests => ${1:1};
use ${2:ModuleName};

ok(${3:assertion});

endsnippet

snippet class "class"
package ${1:ClassName};

${2:use parent qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}

1;

endsnippet

snippet eval "eval"
local $@;
eval {
	${1:# do something risky...}
};
if (my $${2:exception} = $@) {
	${3:# handle failure...}
}

endsnippet

snippet for "for"
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
	${3:# body...}
}

endsnippet

snippet fore "foreach"
foreach ${1:my $${2:x}} (@${3:array}) {
	${4:# body...}
}

endsnippet

snippet if "if"
if ($1) {
	${2:# body...}
}

endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };

endsnippet

snippet unless "unless"
unless ($1) {
	${2:# body...}
}

endsnippet

snippet while "while"
while ($1) {
	${2:# body...}
}

endsnippet

snippet until "until"
until ($1) {
	${2:# body...}
}

endsnippet

# vim:ft=snippets:
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet shebang "shebang for perl" !b
#!/usr/bin/perl

endsnippet

snippet openw "open and write" 
open ${1:FH},'>',"${2:file}" or die "\$0: failed to open input file '$2' : \$!\n";
print $1 ${3:something};
close $1;
endsnippet

snippet opena "open and append" 
open ${1:FH},'>>',"${2:file}" or die "\$0: failed to open input file '$2' : \$!\n";
print $1 ${3:something};
close $1;
endsnippet

snippet openr "open and read" 
open ${1:FH},'<',"${2:file}" or die "\$0: failed to open input file '$2' : \$!\n";
${3:do something};
close $1;
endsnippet

snippet chomp "strip whitespace,self change" i
chomp ($1);
endsnippet

snippet split "split string" i
split /${1:pattern}/, ${2:string}
endsnippet

#snippet eval "eval" i
#eval {$1};
#endsnippet
snippet use "use" !b
use autodie;
use warnings;
endsnippet

snippet push "add something to the tail of array" i
push @${1:array}, ${2:item};
endsnippet

snippet unshift "add something to the head of array" i
unshift @${1:array}, ${2:item};
endsnippet

snippet pop "get and remove the last item of an array" i
pop @${1:array};
endsnippet

snippet shift "get and remove the first item of an array" i
shift @${1:array};
endsnippet

snippet qw "get an array of string" i
qw (${1:word1 word2 ...})
endsnippet

snippet splice "delete something from start index or add something to array" i
splice @${1:array}, ${2:start_index}, ${3:length_to_delete}, ${4:something_to_add_at_start_index};
endsnippet

snippet each "return (index,value) of array or (key,value) of hash" i
each @${1:array}
endsnippet

snippet join "join pieces into a string" i
join "${1:glue}", ${2:list_or_array}
endsnippet

snippet print "print" i
print "$1\n";
endsnippet
